import React, { useState, useEffect, createContext, useContext, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, onSnapshot } from 'firebase/firestore';

// Context for Firebase and User ID
const FirebaseContext = createContext(null);

// Loading Spinner Component
const LoadingSpinner = () => (
    <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50">
        <div className="animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-blue-500"></div>
        <p className="ml-4 text-white text-lg">Loading...</p>
    </div>
);

// Message Box Component
const MessageBox = ({ title, message, type, onClose }) => {
    if (!message) return null;

    let bgColor = 'bg-blue-500';
    let textColor = 'text-white';
    let icon = 'ℹ️'; // Info icon

    switch (type) {
        case 'success':
            bgColor = 'bg-green-500';
            icon = '✅';
            break;
        case 'error':
            bgColor = 'bg-red-500';
            icon = '❌';
            break;
        case 'warning':
            bgColor = 'bg-yellow-500';
            icon = '⚠️';
            break;
        default:
            // info
            break;
    }

    return (
        <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 p-4">
            <div className={`${bgColor} ${textColor} rounded-lg shadow-xl p-6 max-w-sm w-full transform transition-all duration-300 scale-100`}>
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-bold flex items-center">
                        <span className="mr-2">{icon}</span> {title}
                    </h3>
                    <button className="text-white text-2xl font-bold leading-none hover:text-gray-200" onClick={onClose}>&times;</button>
                </div>
                <p className="text-sm mb-6">{message}</p>
                {type !== 'success' && ( // Keep close button for errors/warnings
                    <button className="w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white font-bold py-2 px-4 rounded-lg transition duration-200" onClick={onClose}>
                        Close
                    </button>
                )}
            </div>
        </div>
    );
};

// Helper component for task fields to reduce repetition
const TaskFields = ({ stepId, itemId, progressData, handleTaskFieldChange, showNotes = false }) => {
    const item = progressData?.[stepId]?.[itemId] || {};
    const notes = item.notes || '';
    const projectedStartDate = item.projectedStartDate || '';
    const projectedEndDate = item.projectedEndDate || '';
    const actualStartDate = item.actualStartDate || '';
    const actualEndDate = item.actualEndDate || '';
    const timeNeeded = item.timeNeeded || '';

    return (
        <div className="ml-7 mt-2 space-y-2 text-sm text-gray-700 bg-blue-100 p-3 rounded-md shadow-inner">
            <div className="flex flex-wrap items-center gap-2">
                <label className="font-bold w-32 min-w-[100px]">Projected Start:</label>
                <input
                    type="date"
                    data-step-id={stepId}
                    data-item-id={itemId}
                    data-field-name="projectedStartDate"
                    className="border border-gray-300 rounded-md px-2 py-1 w-auto min-w-[120px] focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                    onChange={handleTaskFieldChange}
                    value={projectedStartDate}
                />
                <label className="font-bold w-32 min-w-[100px]">Projected End:</label>
                <input
                    type="date"
                    data-step-id={stepId}
                    data-item-id={itemId}
                    data-field-name="projectedEndDate"
                    className="border border-gray-300 rounded-md px-2 py-1 w-auto min-w-[120px] focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                    onChange={handleTaskFieldChange}
                    value={projectedEndDate}
                />
            </div>
            <div className="flex flex-wrap items-center gap-2">
                <label className="font-bold w-32 min-w-[100px]">Actual Start:</label>
                <input
                    type="date"
                    data-step-id={stepId}
                    data-item-id={itemId}
                    data-field-name="actualStartDate"
                    className="border border-gray-300 rounded-md px-2 py-1 w-auto min-w-[120px] focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                    onChange={handleTaskFieldChange}
                    value={actualStartDate}
                />
                <label className="font-bold w-32 min-w-[100px]">Actual End:</label>
                <input
                    type="date"
                    data-step-id={stepId}
                    data-item-id={itemId}
                    data-field-name="actualEndDate"
                    className="border border-gray-300 rounded-md px-2 py-1 w-auto min-w-[120px] focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                    onChange={handleTaskFieldChange}
                    value={actualEndDate}
                />
            </div>
            <div className="flex flex-wrap items-center gap-2">
                <label className="font-bold w-32 min-w-[100px]">Time Needed:</label>
                <input
                    type="text"
                    data-step-id={stepId}
                    data-item-id={itemId}
                    data-field-name="timeNeeded"
                    className="border border-gray-300 rounded-md px-2 py-1 w-full max-w-xs focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                    placeholder="e.g., 2 weeks, 3 days"
                    onChange={handleTaskFieldChange}
                    value={timeNeeded}
                />
            </div>
            {showNotes && (
                <div className="flex flex-wrap items-center gap-2">
                    <label className="font-bold w-32 min-w-[100px]">Notes:</label>
                    <input
                        type="text"
                        data-step-id={stepId}
                        data-item-id={itemId}
                        data-field-name="notes"
                        className="flex-grow border border-gray-300 rounded-md px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                        placeholder="e.g., v1.2, link to Google Sheet"
                        onChange={handleTaskFieldChange}
                        value={notes}
                    />
                </div>
            )}
        </div>
    );
};

// Document Manager Component for handling drafts
const DocumentManager = ({ stepId, itemId, documentName, progressData, setProgressData }) => {
    const { db, userId, showMessage, appId, setIsLoading } = useContext(FirebaseContext);
    const [isExpanded, setIsExpanded] = useState(false);
    const [newDraft, setNewDraft] = useState({ versionName: '', status: 'In Progress', notes: '', url: '' });

    const item = progressData?.[stepId]?.[itemId] || {};
    const documents = item.documents || [];

    // Function to save the updated documents array to Firestore
    const saveDocuments = useCallback(async (updatedDocuments) => {
        if (!db || !userId || !appId) {
            console.warn("Firestore not initialized, userId, or appId not available for saving documents.");
            showMessage("Error", "Cannot save documents. Firebase not ready.", 'error');
            return;
        }

        setIsLoading(true);
        const docRef = doc(db, `artifacts/${appId}/users/${userId}/restaurant_progress`, 'user_data');
        const updateData = {};
        updateData[`${stepId}.${itemId}.documents`] = updatedDocuments;

        try {
            await setDoc(docRef, updateData, { merge: true });
            console.log("Documents saved successfully!");
            showMessage("Success", "Document drafts updated!", 'success');
        } catch (error) {
            console.error("Error saving documents:", error);
            showMessage("Error", "Failed to save documents.", 'error');
        } finally {
            setIsLoading(false);
        }
    }, [db, userId, appId, showMessage, setIsLoading, stepId, itemId]);

    const handleAddDraft = () => {
        if (!newDraft.versionName || !newDraft.url) {
            showMessage("Error", "Version Name and Document URL are required to add a new draft.", 'error');
            return;
        }

        const timestamp = new Date().toISOString();
        const updatedDocuments = documents.map(doc => ({ ...doc, isCurrent: false })); // Set all existing to not current
        const newDoc = {
            ...newDraft,
            uploadDate: timestamp,
            isCurrent: true, // New draft becomes current
            id: Date.now().toString() // Simple unique ID for React keys
        };

        const newDocumentsArray = [...updatedDocuments, newDoc];
        setProgressData(prevData => {
            const newData = { ...prevData };
            newData[stepId][itemId] = {
                ...newData[stepId][itemId],
                documents: newDocumentsArray
            };
            return newData;
        });
        saveDocuments(newDocumentsArray);
        setNewDraft({ versionName: '', status: 'In Progress', notes: '', url: '' }); // Reset form
        setIsExpanded(true); // Keep expanded after adding
    };

    const handleSetAsCurrent = (docId) => {
        const updatedDocuments = documents.map(doc => ({
            ...doc,
            isCurrent: doc.id === docId
        }));
        setProgressData(prevData => {
            const newData = { ...prevData };
            newData[stepId][itemId] = {
                ...newData[stepId][itemId],
                documents: updatedDocuments
            };
            return newData;
        });
        saveDocuments(updatedDocuments);
    };

    const handleDeleteDraft = (docId) => {
        if (window.confirm("Are you sure you want to delete this document draft? This action cannot be undone.")) {
            const updatedDocuments = documents.filter(doc => doc.id !== docId);
            setProgressData(prevData => {
                const newData = { ...prevData };
                newData[stepId][itemId] = {
                    ...newData[stepId][itemId],
                    documents: updatedDocuments
                };
                return newData;
            });
            saveDocuments(updatedDocuments);
        }
    };

    const handleDraftChange = (e) => {
        const { name, value } = e.target;
        setNewDraft(prev => ({ ...prev, [name]: value }));
    };

    return (
        <div className="ml-7 mt-4 p-4 bg-gray-50 rounded-md border border-gray-200 shadow-sm">
            <button
                className="w-full text-left font-bold text-blue-700 hover:text-blue-900 flex justify-between items-center py-2 transition duration-200 ease-in-out"
                onClick={() => setIsExpanded(!isExpanded)}
            >
                <span>Manage Documents for: {documentName}</span>
                <span className={`transform transition-transform duration-300 ${isExpanded ? 'rotate-180' : 'rotate-0'}`}>▼</span>
            </button>

            {isExpanded && (
                <div className="mt-4 border-t border-gray-200 pt-4">
                    <h4 className="font-semibold text-md mb-2 text-gray-800">Current Drafts:</h4>
                    {documents.length === 0 ? (
                        <p className="text-gray-600 italic">No drafts added yet.</p>
                    ) : (
                        <ul className="space-y-3">
                            {documents.map(doc => (
                                <li key={doc.id} className={`p-3 border rounded-lg flex flex-col sm:flex-row justify-between items-start sm:items-center transition duration-200 ease-in-out ${doc.isCurrent ? 'bg-blue-100 border-blue-500 shadow-md' : 'bg-white border-gray-300'}`}>
                                    <div className="flex-grow mb-2 sm:mb-0">
                                        <p className="font-semibold text-gray-900">{doc.versionName} {doc.isCurrent && <span className="text-blue-600 text-xs font-bold ml-1">(Current)</span>}</p>
                                        <p className="text-sm text-gray-700">Status: {doc.status}</p>
                                        {doc.notes && <p className="text-sm text-gray-600">Notes: {doc.notes}</p>}
                                        {doc.url && <p className="text-sm text-blue-600 hover:underline mt-1"><a href={doc.url} target="_blank" rel="noopener noreferrer">View Document</a></p>}
                                        <p className="text-xs text-gray-500 mt-1">Uploaded: {new Date(doc.uploadDate).toLocaleDateString()}</p>
                                    </div>
                                    <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                                        {!doc.isCurrent && (
                                            <button
                                                className="bg-blue-500 hover:bg-blue-600 text-white text-xs px-3 py-1 rounded-md shadow-sm transition duration-200 ease-in-out"
                                                onClick={() => handleSetAsCurrent(doc.id)}
                                            >
                                                Set as Current
                                            </button>
                                        )}
                                        <button
                                            className="bg-red-500 hover:bg-red-600 text-white text-xs px-3 py-1 rounded-md shadow-sm transition duration-200 ease-in-out"
                                            onClick={() => handleDeleteDraft(doc.id)}
                                        >
                                            Delete
                                        </button>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    )}

                    <h4 className="font-semibold text-md mt-6 mb-2 text-gray-800">Add New Draft:</h4>
                    <div className="space-y-3">
                        <div>
                            <label htmlFor={`versionName-${itemId}`} className="block text-sm font-medium text-gray-700">Version Name:</label>
                            <input
                                type="text"
                                id={`versionName-${itemId}`}
                                name="versionName"
                                value={newDraft.versionName}
                                onChange={handleDraftChange}
                                placeholder="e.g., Draft 1, Final v2"
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out"
                            />
                        </div>
                        <div>
                            <label htmlFor={`status-${itemId}`} className="block text-sm font-medium text-gray-700">Status:</label>
                            <select
                                id={`status-${itemId}`}
                                name="status"
                                value={newDraft.status}
                                onChange={handleDraftChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out"
                            >
                                <option value="In Progress">In Progress</option>
                                <option value="Submitted">Submitted</option>
                                <option value="Under Review">Under Review</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                                <option value="Revised">Revised</option>
                                <option value="Final">Final</option>
                            </select>
                        </div>
                        <div>
                            <label htmlFor={`url-${itemId}`} className="block text-sm font-medium text-gray-700">Document URL (e.g., Google Drive link):</label>
                            <input
                                type="url"
                                id={`url-${itemId}`}
                                name="url"
                                value={newDraft.url}
                                onChange={handleDraftChange}
                                placeholder="https://docs.google.com/document/d/..."
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out"
                            />
                        </div>
                        <div>
                            <label htmlFor={`notes-${itemId}`} className="block text-sm font-medium text-gray-700">Notes (for this draft):</label>
                            <textarea
                                id={`notes-${itemId}`}
                                name="notes"
                                value={newDraft.notes}
                                onChange={handleDraftChange}
                                placeholder="e.g., Changes requested by BFD, awaiting final sign-off."
                                rows="2"
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 resize-y transition duration-150 ease-in-out"
                            ></textarea>
                        </div>
                        <button
                            className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out"
                            onClick={handleAddDraft}
                        >
                            Add Draft
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};


// Initial data for the Progress Tracker
const initialProgressData = {
    phase1: {
        businessIdea: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        marketResearch: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        defineMenuPricing: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        legalStructure: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        operatingAgreement: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        einNumber: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        businessPlan: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
    },
    financialDocs: {
        startingPoint: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        payrollForecast: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        salesForecast: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        additionalInputs: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        operatingExpenses: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        cashFlowForecast: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        incomeStatement: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        balanceSheet: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        breakevenAnalysis: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        amortizationDepreciation: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        financialRatios: { completed: false, notes: '', projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
    },
    phase2LocationDesign: {
        leaseSigning: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        legalReviewLease: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        architecturalPlans: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        submitPlansBoardHealth: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        submitPlansCityBuildingPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        equipmentSchedule: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        coordinateEquipmentDrawings: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        longFormPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Emphasize Workers Comp proof, licensed contractor/engineer signatures, and nominal fee letter potential.', documents: [] },
        amendmentLongForm: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        shortFormPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
    },
    phase3ConstructionInstallations: {
        electricalPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        verifyElectricalFee: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        fireAlarmPermitDetails: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Note stringent documentation (Tier II plans, battery calcs, narrative, sequence of operations) and BFD input.', documents: [] },
        plumbingPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        checkBWSCRequirements: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        gasPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        sheetMetalPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        fireProtectionPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        obtainBFDFireProtectionPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Crucial: Dual permitting with BFD. Requires BFD installation application, Sprinkler System Permit Application, Fire Alarm Permit Application, and detailed sequence of operation.', documents: [] },
        trenchPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Emphasize compliance with M.G.L. c. 82A, 520 CMR 7.00 et seq., OSHA, and Public Works coordination.', documents: [] },
        offHourPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        signagePermits: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        hvacInstallationPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        greaseTrapPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
    },
    phase4PreopeningOperational: {
        healthPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Emphasize plan review requirement and Food Protection Manager certification.', documents: [] },
        mobileFoodPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Reiterate contacting BFD Special Hazardous Division for propane/generators and Fire Marshal’s Office for exhaust systems.', documents: [] },
        siteCleanlinessLicense: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Reiterate need for Street Occupancy Permit from Public Works if dumpster on public way.', documents: [] },
        certificateOfOccupancy: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        bfdFinalInspectionCO: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Crucial: BFD final inspection and sign-off is mandatory for C of O issuance.', documents: [] },
        fireSafetyDocumentationCO: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Highlight extensive fire safety documentation (NFPA standards, test reports, PE certifications, Fire Safety & Evacuation Plan).', documents: [] },
        placeOfAssemblyPermit: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Required if occupant capacity exceeds 49 persons; prerequisite for C of O.', documents: [] },
        liquorLicense: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        commonVictuallerLicense: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', notes: 'Crucial: Required for any restaurant serving food in Boston (without alcohol). Involves application, document gathering, potential public hearing, and fees. Often requires prior approval of Health Permit and C of O.', documents: [] },
        businessCertificate: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        workersCompProof: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        foodVendors: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        posSetup: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        hrPayrollAccounting: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        hiringAds: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        employeeTraining: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        friendsFamilySoftOpening: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        internetPhoneTvSetup: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        linenServiceSetup: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        pestControlSetup: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        securitySystem: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
    },
    phase5OngoingCompliance: {
        annualRenewals: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        annualCommonVictuallerRenewal: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        weightsMeasures: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        regularHealthInspections: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        ongoingFireInspections: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        taxFilings: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        quarterlyFinancials: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        trashRecyclingCompost: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
        marketingPRActivities: { completed: false, projectedStartDate: '', projectedEndDate: '', actualStartDate: '', actualEndDate: '', timeNeeded: '', documents: [] },
    },
};

// Initial data for Financial Projections Template
const initialProjectionsData = {
    revenue: {
        foodSales: 0,
        beverageSales: 0,
        merchandiseSales: 0,
        cateringSales: 0,
        otherRevenue: 0,
        annualGrowthRate: 0.05, // 5%
    },
    cogs: {
        foodCogsPercent: 0.25, // 25%
        beverageCogsPercent: 0.20, // 20%
        merchandiseCogsPercent: 0.40, // 40%
        cateringCogsPercent: 0.30, // 30%
        otherCogsPercent: 0.10, // 10%
    },
    operatingExpenses: {
        rent: 0,
        utilities: 0,
        insurance: 0,
        marketing: 0,
        legalAccounting: 0,
        repairsMaintenance: 0,
        supplies: 0,
        adminOffice: 0,
        wasteRemoval: 0, // New
        musicLicensing: 0, // New
        depreciation: 0, // New
        interestExpense: 0, // New
        otherOperatingExpenses: 0,
        opExGrowthRate: 0.03, // 3%
    },
    payroll: { // Moved payroll to its own section for clarity
        salaryOwners: 0,
        salaryFullTime: 0,
        salaryPartTime: 0,
        payrollTaxRate: 0.08, // 8%
        payrollGrowthRate: 0.05, // 5%
    },
    startupCosts: {
        leaseholdImprovements: 0,
        kitchenEquipment: 0,
        furnitureFixtures: 0,
        initialInventory: 0,
        preOpeningSalaries: 0,
        depositsLicenses: 0,
        initialMarketing: 0,
        legalFeesStartup: 0, // New
        architecturalFeesStartup: 0, // New
        preOpeningRentDeposit: 0, // New
        contingency: 0,
    },
    fundingSources: {
        ownersEquity: 0,
        investorFunds: 0,
        bankLoans: 0,
        otherFunding: 0,
    },
    taxRate: 0.25, // New: Income tax rate, 25%
    versionNotes: '',
};

// Progress Tracker Component
const ProgressTracker = () => {
    const { db, userId, showMessage, progressData, setProgressData, appId, setIsLoading } = useContext(FirebaseContext);
    const [openSections, setOpenSections] = useState({});

    // Function to save user's progress to Firestore
    const saveTrackerProgress = useCallback(async (stepId, itemId, itemObject) => {
        if (!db || !userId || !appId) {
            console.warn("Firestore not initialized, userId, or appId not available for saving progress.");
            showMessage("Error", "Cannot save progress. Firebase not ready.", 'error');
            return;
        }

        setIsLoading(true);
        const docRef = doc(db, `artifacts/${appId}/users/${userId}/restaurant_progress`, 'user_data');
        const updateData = {};
        updateData[`${stepId}.${itemId}`] = itemObject; // Save the entire object for the item

        try {
            await setDoc(docRef, updateData, { merge: true });
            console.log("Tracker progress saved successfully!");
            showMessage("Success", "Progress saved!", 'success');
        } catch (error) {
            console.error("Error saving tracker progress:", error);
            showMessage("Error", "Failed to save tracker progress.", 'error');
        } finally {
            setIsLoading(false);
        }
    }, [db, userId, appId, showMessage, setIsLoading]);

    // Handle all task field changes (checkbox, text, date)
    const handleTaskFieldChange = useCallback((event) => {
        const { dataset, value, type, checked } = event.target;
        const { stepId, itemId, fieldName } = dataset; // fieldName will be 'completed', 'projectedStartDate', 'notes', etc.

        setProgressData(prevData => {
            const newData = { ...prevData };
            // Ensure the item is an object before updating its properties
            if (!newData[stepId][itemId] || typeof newData[stepId][itemId] !== 'object') {
                // If it's not an object (e.g., old boolean structure), convert it
                newData[stepId][itemId] = { completed: newData[stepId][itemId] || false, documents: [] }; // Initialize documents array
            }

            const updatedItem = { ...newData[stepId][itemId] };

            if (type === 'checkbox') {
                updatedItem.completed = checked;
            } else {
                updatedItem[fieldName] = value;
            }

            newData[stepId][itemId] = updatedItem;
            saveTrackerProgress(stepId, itemId, updatedItem); // Save the whole item object
            return newData;
        });
    }, [saveTrackerProgress, setProgressData]);

    // Toggle section visibility
    const toggleSection = (sectionId) => {
        setOpenSections(prev => ({
            ...prev,
            [sectionId]: !prev[sectionId]
        }));
    };

    // Calculate overall progress percentage
    const calculateOverallProgress = () => {
        let totalTasks = 0;
        let completedTasks = 0;

        Object.values(progressData).forEach(phase => {
            Object.values(phase).forEach(item => {
                totalTasks++;
                if (item.completed) {
                    completedTasks++;
                }
            });
        });

        return totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
    };

    const overallProgress = calculateOverallProgress();

    // Apply loaded progress to checkboxes and text inputs
    useEffect(() => {
        if (progressData) {
            Object.keys(progressData).forEach(stepId => {
                Object.keys(progressData[stepId]).forEach(itemId => {
                    const item = progressData[stepId][itemId];
                    if (typeof item === 'object' && item !== null) {
                        const checkbox = document.querySelector(`input[type="checkbox"][data-step-id="${stepId}"][data-item-id="${itemId}"]`);
                        if (checkbox) {
                            checkbox.checked = item.completed || false;
                            const label = checkbox.closest('label');
                            if (label) {
                                if (checkbox.checked) {
                                    label.classList.add('completed-item');
                                } else {
                                    label.classList.remove('completed-item');
                                }
                            }
                        }

                        const fields = ['notes', 'projectedStartDate', 'projectedEndDate', 'actualStartDate', 'actualEndDate', 'timeNeeded'];
                        fields.forEach(fieldName => {
                            const input = document.querySelector(`[data-step-id="${stepId}"][data-item-id="${itemId}"][data-field-name="${fieldName}"]`);
                            if (input && typeof item[fieldName] !== 'undefined') {
                                input.value = item[fieldName];
                            }
                        });
                    }
                });
            });
        }
    }, [progressData]);


    return (
        <>
            <div className="mb-6 p-4 bg-gray-100 rounded-lg shadow-md">
                <h3 className="text-lg font-bold text-gray-800 mb-2">Overall Progress: {overallProgress.toFixed(1)}%</h3>
                <div className="w-full bg-gray-200 rounded-full h-4">
                    <div
                        className="bg-blue-600 h-4 rounded-full transition-all duration-500 ease-out"
                        style={{ width: `${overallProgress}%` }}
                    ></div>
                </div>
            </div>

            {/* Phase 1: Business Planning & Financial Foundations */}
            <div className="mb-8">
                <button className="w-full text-left bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out flex justify-between items-center" onClick={() => toggleSection('phase-1')}>
                    <span className="text-lg">Phase 1: Business Planning & Financial Foundations</span>
                    <span className={`transform transition-transform duration-300 ${openSections['phase-1'] ? 'rotate-180' : 'rotate-0'}`}>▼</span>
                </button>
                <div className={`mt-4 p-5 bg-blue-50 rounded-lg shadow-inner ${openSections['phase-1'] ? '' : 'hidden'}`}>
                    <h3 className="text-xl font-semibold text-gray-800 mb-3">Core Business Planning:</h3>
                    <ul className="list-none space-y-3 mb-6">
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase1?.businessIdea?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase1" data-item-id="businessIdea" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase1?.businessIdea?.completed || false} />
                                <span className="ml-2">Generate Ideas for Restaurant Concept & Vision Board</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Develop your restaurant idea, create a vision board for aesthetics and ambiance. (Ref: `stepsRev 4 - Sheet8.csv`, `1. 1 Starting a restaurant from scratch 7.20.23.docx`)</p>
                            <TaskFields stepId="phase1" itemId="businessIdea" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase1" itemId="businessIdea" documentName="Restaurant Concept & Vision Board" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase1?.marketResearch?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase1" data-item-id="marketResearch" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase1?.marketResearch?.completed || false} />
                                <span className="ml-2">Gather Market Research Insights & Competitive Data</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Conduct focus groups, interviews, and competitive analysis. (Ref: `stepsRev 4 - Sheet8.csv`)</p>
                            <TaskFields stepId="phase1" itemId="marketResearch" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase1" itemId="marketResearch" documentName="Market Research Report" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase1?.defineMenuPricing?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase1" data-item-id="defineMenuPricing" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase1?.defineMenuPricing?.completed || false} />
                                <span className="ml-2">Define Menu & Pricing Strategy</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Develop a menu with detailed descriptions, pricing, and initial design concepts. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Sheet8.csv`)</p>
                            <TaskFields stepId="phase1" itemId="defineMenuPricing" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase1" itemId="defineMenuPricing" documentName="Menu & Pricing Document" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase1?.legalStructure?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase1" data-item-id="legalStructure" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase1?.legalStructure?.completed || false} />
                                <span className="ml-2">Pick LLC & DBA Name, File with State for LLC</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Determine business structure (LLC, S-corp, C-corp) and file Articles of Organization. (Ref: `1. 1 Starting a restaurant from scratch 7.20.23.docx`)</p>
                            <TaskFields stepId="phase1" itemId="legalStructure" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase1" itemId="legalStructure" documentName="LLC Filing Documents" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase1?.operatingAgreement?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase1" data-item-id="operatingAgreement" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase1?.operatingAgreement?.completed || false} />
                                <span className="ml-2">Draft and Sign Operating Agreement</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Crucial legal document for LLCs outlining ownership and operational procedures. (Ref: `1. 1 Starting a restaurant from scratch 7.20.23.docx`, `0.4 Starting a Restaurant Documents/ stepsRev 4 - Permits and certifications.csv`)</p>
                            <TaskFields stepId="phase1" itemId="operatingAgreement" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase1" itemId="operatingAgreement" documentName="Operating Agreement" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase1?.einNumber?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase1" data-item-id="einNumber" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase1?.einNumber?.completed || false} />
                                <span className="ml-2">File for Federal IRS EIN Number</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Obtain your Employer Identification Number. (Ref: `1. 1 Starting a restaurant from scratch 7.20.23.docx`)</p>
                            <TaskFields stepId="phase1" itemId="einNumber" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase1" itemId="einNumber" documentName="EIN Confirmation Letter" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase1?.businessPlan?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase1" data-item-id="businessPlan" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase1?.businessPlan?.completed || false} />
                                <span className="ml-2">Develop Comprehensive Business Plan</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Integrate market research, financials, and operational details. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Master Doc List.csv`)</p>
                            <TaskFields stepId="phase1" itemId="businessPlan" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase1" itemId="businessPlan" documentName="Business Plan Document" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                    </ul>

                    <h3 className="text-xl font-semibold text-gray-800 mb-3">Financial Documents & Projections:</h3>
                    <p className="text-gray-700 mb-4">
                        These documents are crucial for understanding your restaurant's financial viability. You'll typically use spreadsheet software (like Excel or Google Sheets) to create and manage these. Use the notes field to track versions or key details.
                    </p>
                    <ul className="list-none space-y-4">
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.startingPoint?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="startingPoint" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.startingPoint?.completed || false} />
                                <span className="ml-2">Starting Point / Initial Capital Document</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Define initial fixed assets (e.g., Leasehold Improvements, Equipment), operating capital (e.g., pre-opening salaries, inventory, legal fees), and sources of funding (Owner's Equity, Loans). This outlines your total required funds. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 1-StartingPoint.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="startingPoint" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="startingPoint" documentName="Starting Point Financials" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.payrollForecast?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="payrollForecast" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.payrollForecast?.completed || false} />
                                <span className="ml-2">Payroll Forecast (Years 1-3)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Project salaries, wages, and associated payroll taxes (Social Security, Medicare, FUTA, SUTA) and employee benefits for all staff types (Owners, Full-Time, Part-Time, Contractors). (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 2a-PayrollYear1.csv`, `2b-PayrollYrs1-3.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="payrollForecast" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="payrollForecast" documentName="Payroll Forecast Spreadsheet" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.salesForecast?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="salesForecast" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.salesForecast?.completed || false} />
                                <span className="ml-2">Sales Forecast (Years 1-3)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Estimate your projected revenue by product line (e.g., Noodle Bowls, Appetizers, Desserts, Beverages), including units sold, sales price per unit, and cost of goods sold (COGS) per unit. Include growth rates for future years. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 3a-SalesForecastYear1.csv`, `3b-SalesForecastYrs1-3.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="salesForecast" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="salesForecast" documentName="Sales Forecast Spreadsheet" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.additionalInputs?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="additionalInputs" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.additionalInputs?.completed || false} />
                                <span className="ml-2">Additional Financial Inputs (A/R, A/P, Line of Credit)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Set assumptions for how quickly you collect receivables and pay liabilities (e.g., percentage paid within 30/60 days), bad debt allowance, and any desired minimum cash balance for a line of credit. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 4-AdditionalInputs.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="additionalInputs" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="additionalInputs" documentName="Additional Financial Inputs Spreadsheet" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.operatingExpenses?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="operatingExpenses" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.operatingExpenses?.completed || false} />
                                <span className="ml-2">Operating Expenses Forecast (Years 1-3)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Detail all non-payroll operating costs such as advertising, insurance, legal fees, rent, utilities, supplies, and repairs. Include projected growth rates. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 5a-OpExYear1.csv`, `5b-OpExYrs1-3.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="operatingExpenses" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="operatingExpenses" documentName="Operating Expenses Spreadsheet" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.cashFlowForecast?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="cashFlowForecast" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.cashFlowForecast?.completed || false} />
                                <span className="ml-2">Cash Flow Forecast (Years 1-3)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Project your cash inflows and outflows over time, showing how cash moves through your business. This is derived from your sales, COGS, operating expenses, and loan activities. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 6a-CashFlowYear1.csv`, `6b-CashFlowYrs1-3.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="cashFlowForecast" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="cashFlowForecast" documentName="Cash Flow Forecast Spreadsheet" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.incomeStatement?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="incomeStatement" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.incomeStatement?.completed || false} />
                                <span className="ml-2">Income Statement (Years 1-3)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Summarize your projected revenues, costs, and expenses over a specific period (e.g., annually) to show your business's profitability. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 7a-IncomeStatementYear1.csv`, `7b-IncomeStatementYrs1-3.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="incomeStatement" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="incomeStatement" documentName="Income Statement Spreadsheet" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.balanceSheet?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="balanceSheet" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.balanceSheet?.completed || false} />
                                <span className="ml-2">Balance Sheet (Years 1-3)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Provide a snapshot of your business's assets, liabilities, and owner's equity at a specific point in time. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - 8-BalanceSheet.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="balanceSheet" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="balanceSheet" documentName="Balance Sheet Spreadsheet" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.breakevenAnalysis?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="breakevenAnalysis" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.breakevenAnalysis?.completed || false} />
                                <span className="ml-2">Breakeven Analysis</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Calculate the sales volume (in dollars or units) your restaurant needs to achieve to cover all its fixed and variable costs, reaching a point of zero profit. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - BreakevenAnalysis.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="breakevenAnalysis" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="breakevenAnalysis" documentName="Breakeven Analysis Report" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.amortizationDepreciation?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="amortizationDepreciation" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.amortizationDepreciation?.completed || false} />
                                <span className="ml-2">Amortization & Depreciation Schedule</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Create schedules for loan repayments (principal and interest) and the depreciation of your fixed assets (e.g., equipment, leasehold improvements) over their useful life. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - Amortization&Depreciation.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="amortizationDepreciation" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="amortizationDepreciation" documentName="Amortization & Depreciation Schedule" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.financialDocs?.financialRatios?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="financialDocs" data-item-id="financialRatios" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.financialDocs?.financialRatios?.completed || false} />
                                <span className="ml-2">Financial Ratios & Diagnostic Tools</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Analyze key financial performance indicators (e.g., Current Ratio, Debt to Equity, Net Profit Margin, Return on Equity) and use diagnostic tools to assess the health and viability of your financial projections. (Ref: `11.1 RENood z Bar Clippership Finalial Pro Rata11/12/20 Rev 1.xlsx - FinancialRatios.csv`, `DiagnosticTools.csv`)</p>
                            <TaskFields stepId="financialDocs" itemId="financialRatios" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="financialDocs" itemId="financialRatios" documentName="Financial Ratios & Diagnostics Report" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                    </ul>
                </div>
            </div>

            {/* Phase 3: Location & Design (Post-Lease, Pre-Construction) */}
            <div className="mb-8">
                <button className="w-full text-left bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out flex justify-between items-center" onClick={() => toggleSection('phase-2-location-design')}>
                    <span className="text-lg">Phase 3: Location & Design (Post-Lease, Pre-Construction)</span>
                    <span className={`transform transition-transform duration-300 ${openSections['phase-2-location-design'] ? 'rotate-180' : 'rotate-0'}`}>▼</span>
                </button>
                <div id="phase-2-location-design-content" className={`mt-4 p-5 bg-blue-50 rounded-lg shadow-inner ${openSections['phase-2-location-design'] ? '' : 'hidden'}`}>
                    <h3 className="text-xl font-semibold text-gray-800 mb-3">Key Steps & Documents:</h3>
                    <ul className="list-none space-y-3">
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.leaseSigning?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="leaseSigning" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.leaseSigning?.completed || false} />
                                <span className="ml-2">Sign Lease Agreement</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Finalize and sign the commercial lease for your restaurant space. (Ref: `10..Lease to open(construction) master punch list.xlsx - Timeline.csv`)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="leaseSigning" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="leaseSigning" documentName="Signed Lease Agreement" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.legalReviewLease?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="legalReviewLease" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.legalReviewLease?.completed || false} />
                                <span className="ml-2">Legal Review of Lease</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Have a lawyer review the commercial lease agreement before signing.</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="legalReviewLease" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="legalReviewLease" documentName="Lease Legal Review Notes" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.architecturalPlans?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="architecturalPlans" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.architecturalPlans?.completed || false} />
                                <span className="ml-2">Architectural Design & Space Plans</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Develop detailed space renderings, floor plans, and interior design sketches. (Ref: `10..Lease to open(construction) master punch list.xlsx - Timeline.csv`)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="architecturalPlans" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="architecturalPlans" documentName="Architectural Plans" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.submitPlansBoardHealth?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="submitPlansBoardHealth" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.submitPlansBoardHealth?.completed || false} />
                                <span className="ml-2">Submit Plans to Board of Health for Approval</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Ensure your architectural plans meet health department requirements. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="submitPlansBoardHealth" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="submitPlansBoardHealth" documentName="Board of Health Submission" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.submitPlansCityBuildingPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="submitPlansCityBuildingPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.submitPlansCityBuildingPermit?.completed || false} />
                                <span className="ml-2">Submit Plans to City ISD for Building Permit</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Submit final architectural plans to the city's Inspectional Services Department for building permit review. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="submitPlansCityBuildingPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="submitPlansCityBuildingPermit" documentName="ISD Building Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.equipmentSchedule?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="equipmentSchedule" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.equipmentSchedule?.completed || false} />
                                <span className="ml-2">Finalize Equipment Schedule & Quotes</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">List all kitchen and dining equipment, get bids. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Final equipment schedule for architect.csv`, `11.4 ReNoodle Bar Start up budget and expenses. - Equipment Schedule.csv`)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="equipmentSchedule" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="equipmentSchedule" documentName="Equipment Schedule & Bids" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.coordinateEquipmentDrawings?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="coordinateEquipmentDrawings" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.coordinateEquipmentDrawings?.completed || false} />
                                <span className="ml-2">Coordinate Equipment with Architect/MEP for Drawings</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Ensure all equipment is integrated into the architectural and mechanical/electrical/plumbing (MEP) drawings. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Final equipment schedule for architect.csv`)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="coordinateEquipmentDrawings" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="coordinateEquipmentDrawings" documentName="Integrated Equipment Drawings" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.longFormPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="longFormPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.longFormPermit?.completed || false} />
                                <span className="ml-2">Apply for Long Form/Alteration Permit/Change of Occupancy (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Required for major renovations, new construction, or change of use. Emphasize Workers' Comp proof, licensed contractor/engineer signatures, and nominal fee letter potential. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="longFormPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="longFormPermit" documentName="ISD Long Form Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.amendmentLongForm?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="amendmentLongForm" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.amendmentLongForm?.completed || false} />
                                <span className="ml-2">Apply for Amendment to a Long Form (ISD - if needed)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">For modifications to an existing long-form permit. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="amendmentLongForm" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="amendmentLongForm" documentName="ISD Long Form Amendment" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase2LocationDesign?.shortFormPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase2LocationDesign" data-item-id="shortFormPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase2LocationDesign?.shortFormPermit?.completed || false} />
                                <span className="ml-2">Apply for Short Form Building Permit (ISD - if applicable)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">For minor construction not affecting structure or life safety. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase2LocationDesign" itemId="shortFormPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase2LocationDesign" itemId="shortFormPermit" documentName="ISD Short Form Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                    </ul>
                </div>
            </div>

            {/* Phase 4: Construction & Major Installations */}
            <div className="mb-8">
                <button className="w-full text-left bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out flex justify-between items-center" onClick={() => toggleSection('phase-3-construction-installations')}>
                    <span className="text-lg">Phase 4: Construction & Major Installations</span>
                    <span className={`transform transition-transform duration-300 ${openSections['phase-3-construction-installations'] ? 'rotate-180' : 'rotate-0'}`}>▼</span>
                </button>
                <div id="phase-3-construction-installations-content" className={`mt-4 p-5 bg-blue-50 rounded-lg shadow-inner ${openSections['phase-3-construction-installations'] ? '' : 'hidden'}`}>
                    <h3 className="text-xl font-semibold text-gray-800 mb-3">Key Steps & Documents:</h3>
                    <ul className="list-none space-y-3">
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.electricalPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="electricalPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.electricalPermit?.completed || false} />
                                <span className="ml-2">Obtain Electrical Permits (General, Low Voltage, Temporary Service) (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Applied by licensed electricians. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="electricalPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="electricalPermit" documentName="Electrical Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.verifyElectricalFee?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="verifyElectricalFee" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.verifyElectricalFee?.completed || false} />
                                <span className="ml-2">Verify Current Electrical Permit Fee Structure with ISD</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Confirm exact fees directly with ISD due to potential inconsistencies. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="verifyElectricalFee" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="verifyElectricalFee" documentName="Electrical Fee Confirmation" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.fireAlarmPermitDetails?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="fireAlarmPermitDetails" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.fireAlarmPermitDetails?.completed || false} />
                                <span className="ml-2">Obtain Electrical Permit for Fire Alarms (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Requires stringent documentation (Tier II plans, battery calculations, narrative, sequence of operations) and BFD input. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="fireAlarmPermitDetails" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="fireAlarmPermitDetails" documentName="Fire Alarm Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.plumbingPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="plumbingPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.plumbingPermit?.completed || false} />
                                <span className="ml-2">Obtain Plumbing Permit (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Applied by licensed plumbers. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="plumbingPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="plumbingPermit" documentName="Plumbing Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.checkBWSCRequirements?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="checkBWSCRequirements" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.checkBWSCRequirements?.completed || false} />
                                <span className="ml-2">Check Boston Water and Sewer Commission (BWSC) Requirements</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Coordinate with BWSC for water and sewer services, which are distinct from ISD plumbing permits. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="checkBWSCRequirements" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="checkBWSCRequirements" documentName="BWSC Coordination Documents" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.gasPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="gasPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.gasPermit?.completed || false} />
                                <span className="ml-2">Obtain Gas Permit (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Mandatory for gasfitting systems, applied by licensed plumbers. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="gasPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="gasPermit" documentName="Gas Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.sheetMetalPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="sheetMetalPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.sheetMetalPermit?.completed || false} />
                                <span className="ml-2">Obtain Sheet Metal Permit Application (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">For HVAC, kitchen exhaust, metal roofing. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="sheetMetalPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="sheetMetalPermit" documentName="Sheet Metal Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.fireProtectionPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="fireProtectionPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.fireProtectionPermit?.completed || false} />
                                <span className="ml-2">Apply for Fire Protection System (Sprinkler) Installation Permit (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Required to obtain official authorization for installation of fire protection systems from ISD. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="fireProtectionPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="fireProtectionPermit" documentName="ISD Fire Protection Permit" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.obtainBFDFireProtectionPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="obtainBFDFireProtectionPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.obtainBFDFireProtectionPermit?.completed || false} />
                                <span className="ml-2">Obtain Boston Fire Department (BFD) Permit for Fire Protection System</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7 font-semibold text-red-700">Crucial: This is a dual permitting/review process. Requires BFD installation application, Sprinkler System Permit Application, Fire Alarm Permit Application, and detailed sequence of operation.</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="obtainBFDFireProtectionPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="obtainBFDFireProtectionPermit" documentName="BFD Fire Protection Permit" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.trenchPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="trenchPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.trenchPermit?.completed || false} />
                                <span className="ml-2">Obtain Trench Permit (ISD - if applicable)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">For excavation, ensures compliance with M.G.L. c. 82A, 520 CMR 7.00 et seq., OSHA, and Public Works coordination. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="trenchPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="trenchPermit" documentName="Trench Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.offHourPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="offHourPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.offHourPermit?.completed || false} />
                                <span className="ml-2">Apply for Off Hour Permit (ISD - if applicable)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">For construction outside normal hours. Requires justification and mitigation plan. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="offHourPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="offHourPermit" documentName="Off Hour Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.signagePermits?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="signagePermits" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.signagePermits?.completed || false} />
                                <span className="ml-2">Obtain Signage Permits (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Permits required for exterior signs. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Contractors.csv`)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="signagePermits" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="signagePermits" documentName="Signage Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.hvacInstallationPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="hvacInstallationPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.hvacInstallationPermit?.completed || false} />
                                <span className="ml-2">Obtain HVAC Installation/Permit (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Permit for heating, ventilation, and air conditioning systems. (Ref: `11.4 ReNoodle Bar Start up budget and expenses. - Construction.csv`)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="hvacInstallationPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="hvacInstallationPermit" documentName="HVAC Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase3ConstructionInstallations?.greaseTrapPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase3ConstructionInstallations" data-item-id="greaseTrapPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase3ConstructionInstallations?.greaseTrapPermit?.completed || false} />
                                <span className="ml-2">Obtain Grease Trap Installation/Permit (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Critical permit for restaurant waste management. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Contractors.csv`)</p>
                            <TaskFields stepId="phase3ConstructionInstallations" itemId="greaseTrapPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase3ConstructionInstallations" itemId="greaseTrapPermit" documentName="Grease Trap Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                    </ul>
                </div>
            </div>

            {/* Phase 5: Pre-Opening & Operational Setup */}
            <div className="mb-8">
                <button className="w-full text-left bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out flex justify-between items-center" onClick={() => toggleSection('phase-4-preopening-operational')}>
                    <span className="text-lg">Phase 5: Pre-Opening & Operational Setup</span>
                    <span className={`transform transition-transform duration-300 ${openSections['phase-4-preopening-operational'] ? 'rotate-180' : 'rotate-0'}`}>▼</span>
                </button>
                <div id="phase-4-preopening-operational-content" className={`mt-4 p-5 bg-blue-50 rounded-lg shadow-inner ${openSections['phase-4-preopening-operational'] ? '' : 'hidden'}`}>
                    <h3 className="text-xl font-semibold text-gray-800 mb-3">Key Steps & Documents:</h3>
                    <ul className="list-none space-y-3">
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.healthPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="healthPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.healthPermit?.completed || false} />
                                <span className="ml-2">Obtain Health Permit (Food Establishment Application)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Required for all food establishments. Emphasize plan review requirement and Food Protection Manager certification. (Ref: `Boston ISD Forms and Permits` - Health & Environmental Permits)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="healthPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="healthPermit" documentName="Health Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.mobileFoodPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="mobileFoodPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.mobileFoodPermit?.completed || false} />
                                <span className="ml-2">Obtain Mobile Food Permit (if applicable)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">For mobile food operations. Reiterate contacting BFD Special Hazardous Division for propane/generators and Fire Marshal’s Office for exhaust systems. (Ref: `Boston ISD Forms and Permits` - Health & Environmental Permits)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="mobileFoodPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="mobileFoodPermit" documentName="Mobile Food Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.siteCleanlinessLicense?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="siteCleanlinessLicense" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.siteCleanlinessLicense?.completed || false} />
                                <span className="ml-2">Obtain Site Cleanliness License (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">For businesses with bulk refuse. Reiterate need for Street Occupancy Permit from Public Works if dumpster on public way. (Ref: `Boston ISD Forms and Permits` - Health & Environmental Permits)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="siteCleanlinessLicense" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="siteCleanlinessLicense" documentName="Site Cleanliness License Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.certificateOfOccupancy?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="certificateOfOccupancy" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.certificateOfOccupancy?.completed || false} />
                                <span className="ml-2">Obtain Certificate of Occupancy (C of O) (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Official certification for building use, contingent on BFD approval. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="certificateOfOccupancy" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="certificateOfOccupancy" documentName="Certificate of Occupancy" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.bfdFinalInspectionCO?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="bfdFinalInspectionCO" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.bfdFinalInspectionCO?.completed || false} />
                                <span className="ml-2">BFD Final Inspection & Sign-off for C of O</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7 font-semibold text-red-700">Crucial: BFD final inspection and sign-off is mandatory for C of O issuance.</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="bfdFinalInspectionCO" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="bfdFinalInspectionCO" documentName="BFD Final Inspection Report" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.fireSafetyDocumentationCO?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="fireSafetyDocumentationCO" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.fireSafetyDocumentationCO?.completed || false} />
                                <span className="ml-2">Submit Extensive Fire Safety Documentation for C of O</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Highlight extensive fire safety documentation (NFPA standards, test reports, PE certifications, Fire Safety & Evacuation Plan). (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="fireSafetyDocumentationCO" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="fireSafetyDocumentationCO" documentName="Fire Safety Documentation" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.placeOfAssemblyPermit?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="placeOfAssemblyPermit" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.placeOfAssemblyPermit?.completed || false} />
                                <span className="ml-2">Obtain Place of Assembly Permit (ISD - if applicable)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Required if occupant capacity exceeds 49 persons; prerequisite for C of O. (Ref: `Boston ISD Forms and Permits` - Building Permits)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="placeOfAssemblyPermit" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="placeOfAssemblyPermit" documentName="Place of Assembly Permit Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.liquorLicense?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="liquorLicense" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.liquorLicense?.completed || false} />
                                <span className="ml-2">Apply for Liquor License (if applicable)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Separate process, often complex and time-consuming. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Permits and certifications.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="liquorLicense" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="liquorLicense" documentName="Liquor License Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.commonVictuallerLicense?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="commonVictuallerLicense" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.commonVictuallerLicense?.completed || false} />
                                <span className="ml-2">Obtain Common Victualler License (No Alcohol)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7 font-semibold text-red-700">Crucial: Required for any restaurant serving food in Boston (without alcohol). Involves application, document gathering, potential public hearing, and fees. Often requires prior approval of Health Permit and C of O.</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="commonVictuallerLicense" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} showNotes={true} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="commonVictuallerLicense" documentName="Common Victualler License Application" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.businessCertificate?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="businessCertificate" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.businessCertificate?.completed || false} />
                                <span className="ml-2">Obtain City Business Certificate</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">General business registration with the city. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Permits and certifications.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="businessCertificate" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="businessCertificate" documentName="City Business Certificate" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.workersCompProof?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="workersCompProof" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.workersCompProof?.completed || false} />
                                <span className="ml-2">Provide Proof of Workers' Compensation Insurance</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Required for all employers. (Ref: `1. 1 Starting a restaurant from scratch 7.20.23.docx`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="workersCompProof" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="workersCompProof" documentName="Workers' Comp Insurance Proof" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.foodVendors?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="foodVendors" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.foodVendors?.completed || false} />
                                <span className="ml-2">Establish Food Vendor Accounts</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Set up accounts with food suppliers. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="foodVendors" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="foodVendors" documentName="Food Vendor Contracts" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.posSetup?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="posSetup" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.posSetup?.completed || false} />
                                <span className="ml-2">Set up Point of Sale (POS) System</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Order and set up your POS system (e.g., Toast). (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="posSetup" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="posSetup" documentName="POS System Configuration" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.hrPayrollAccounting?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="hrPayrollAccounting" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.hrPayrollAccounting?.completed || false} />
                                <span className="ml-2">Set up HR/Payroll/Accounting Systems (e.g., R365)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Establish your back-office systems. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="hrPayrollAccounting" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="hrPayrollAccounting" documentName="HR/Payroll/Accounting Setup" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.hiringAds?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="hiringAds" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.hiringAds?.completed || false} />
                                <span className="ml-2">Place Ads for Hiring & Onboard Employees</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Recruit and onboard your team. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - 2 week to open schedule.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="hiringAds" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="hiringAds" documentName="Hiring & Onboarding Documents" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.employeeTraining?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="employeeTraining" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.employeeTraining?.completed || false} />
                                <span className="ml-2">Conduct Employee Training</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Train all new employees on operations, policies, and customer service. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - 2 week to open schedule.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="employeeTraining" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="employeeTraining" documentName="Employee Training Materials" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.friendsFamilySoftOpening?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="friendsFamilySoftOpening" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.friendsFamilySoftOpening?.completed || false} />
                                <span className="ml-2">Host Friends & Family / Soft Opening</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Test operations in a live environment before official grand opening. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - 2 week to open schedule.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="friendsFamilySoftOpening" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="friendsFamilySoftOpening" documentName="Soft Opening Feedback" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.internetPhoneTvSetup?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="internetPhoneTvSetup" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.internetPhoneTvSetup?.completed || false} />
                                <span className="ml-2">Set up Internet, Phone, TV Services</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Arrange for essential communication and entertainment services. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="internetPhoneTvSetup" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="internetPhoneTvSetup" documentName="Utility Contracts" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.linenServiceSetup?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="linenServiceSetup" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.linenServiceSetup?.completed || false} />
                                <span className="ml-2">Set up Linen Service</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Arrange for regular delivery and pickup of linens. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="linenServiceSetup" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="linenServiceSetup" documentName="Linen Service Contract" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.pestControlSetup?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="pestControlSetup" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.pestControlSetup?.completed || false} />
                                <span className="ml-2">Set up Pest Control Service</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Arrange for ongoing pest management. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - 2 week to open schedule.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="pestControlSetup" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="pestControlSetup" documentName="Pest Control Contract" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase4PreopeningOperational?.securitySystem?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase4PreopeningOperational" data-item-id="securitySystem" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase4PreopeningOperational?.securitySystem?.completed || false} />
                                <span className="ml-2">Set up Security System</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Install and configure your security system. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Starting a Business Master Steps.csv`)</p>
                            <TaskFields stepId="phase4PreopeningOperational" itemId="securitySystem" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase4PreopeningOperational" itemId="securitySystem" documentName="Security System Documentation" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                    </ul>
                </div>
            </div>

            {/* Phase 6: Ongoing Compliance & Operations */}
            <div className="mb-8">
                <button className="w-full text-left bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out flex justify-between items-center" onClick={() => toggleSection('phase-5-ongoing-compliance')}>
                    <span className="text-lg">Phase 6: Ongoing Compliance & Operations</span>
                    <span className={`transform transition-transform duration-300 ${openSections['phase-5-ongoing-compliance'] ? 'rotate-180' : 'rotate-0'}`}>▼</span>
                </button>
                <div id="phase-5-ongoing-compliance-content" className={`mt-4 p-5 bg-blue-50 rounded-lg shadow-inner ${openSections['phase-5-ongoing-compliance'] ? '' : 'hidden'}`}>
                    <h3 className="text-xl font-semibold text-gray-800 mb-3">Key Steps & Documents:</h3>
                    <ul className="list-none space-y-3">
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.annualRenewals?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="annualRenewals" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.annualRenewals?.completed || false} />
                                <span className="ml-2">Annual Renewals (LLC, Business, Licenses)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Ensure all annual permits and licenses are renewed. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Obligations.csv`)</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="annualRenewals" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="annualRenewals" documentName="Annual Renewal Filings" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.annualCommonVictuallerRenewal?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="annualCommonVictuallerRenewal" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.annualCommonVictuallerRenewal?.completed || false} />
                                <span className="ml-2">Annual Renewal of Common Victualler License</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Renew your Common Victualler License annually with the Boston Licensing Board.</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="annualCommonVictuallerRenewal" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="annualCommonVictuallerRenewal" documentName="Common Victualler Renewal" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.weightsMeasures?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="weightsMeasures" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.weightsMeasures?.completed || false} />
                                <span className="ml-2">Weights and Measures Inspections (ISD)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Ensure all measuring devices are inspected and approved annually. (Ref: `Boston ISD Forms and Permits` - Health & Environmental Permits)</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="weightsMeasures" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="weightsMeasures" documentName="Weights & Measures Certificates" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.regularHealthInspections?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="regularHealthInspections" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.regularHealthInspections?.completed || false} />
                                <span className="ml-2">Regular Health Inspections</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Ongoing compliance with health and sanitary codes.</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="regularHealthInspections" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="regularHealthInspections" documentName="Health Inspection Reports" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.ongoingFireInspections?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="ongoingFireInspections" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.ongoingFireInspections?.completed || false} />
                                <span className="ml-2">Ongoing Fire Inspections</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Annual or biannual fire safety checks by BFD.</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="ongoingFireInspections" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="ongoingFireInspections" documentName="Fire Inspection Reports" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.taxFilings?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="taxFilings" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.taxFilings?.completed || false} />
                                <span className="ml-2">Quarterly and Annual Tax Filings (W-2s, LLC/S-corp/C-corp returns)</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Stay compliant with federal and state tax obligations. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Obligations.csv`)</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="taxFilings" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="taxFilings" documentName="Tax Filing Documents" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.quarterlyFinancials?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="quarterlyFinancials" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.quarterlyFinancials?.completed || false} />
                                <span className="ml-2">Submit Quarterly Certified Financial Statements</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">As required by loans or investors. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Obligations.csv`)</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="quarterlyFinancials" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="quarterlyFinancials" documentName="Quarterly Financial Statements" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.trashRecyclingCompost?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="trashRecyclingCompost" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.trashRecyclingCompost?.completed || false} />
                                <span className="ml-2">Manage Trash, Recycling, and Compost Services</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Ensure ongoing waste management contracts and practices are in place. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Contractors.csv`)</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="trashRecyclingCompost" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="trashRecyclingCompost" documentName="Waste Management Contracts" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                        <li>
                            <label className={`inline-flex items-center text-gray-800 ${progressData?.phase5OngoingCompliance?.marketingPRActivities?.completed ? 'completed-item' : ''}`}>
                                <input type="checkbox" data-step-id="phase5OngoingCompliance" data-item-id="marketingPRActivities" data-field-name="completed" className="form-checkbox h-5 w-5 text-blue-600 rounded-md" onChange={handleTaskFieldChange} checked={progressData?.phase5OngoingCompliance?.marketingPRActivities?.completed || false} />
                                <span className="ml-2">Ongoing Marketing & PR Activities</span>
                            </label>
                            <p className="text-sm text-gray-600 ml-7">Maintain consistent marketing and public relations efforts post-opening. (Ref: `0.4 Starting a Restaurant Documents/ stepsRev 4 - Marketing.csv`)</p>
                            <TaskFields stepId="phase5OngoingCompliance" itemId="marketingPRActivities" progressData={progressData} handleTaskFieldChange={handleTaskFieldChange} />
                            <DocumentManager stepId="phase5OngoingCompliance" itemId="marketingPRActivities" documentName="Marketing & PR Plans" progressData={progressData} setProgressData={setProgressData} />
                        </li>
                    </ul>
                </div>
            </div>
        </>
    );
};

// Financial Projections Component
const FinancialProjections = () => {
    const { db, userId, showMessage, projectionsData, setProjectionsData, appId, setIsLoading } = useContext(FirebaseContext);
    const [openSections, setOpenSections] = useState({});

    // Calculate totals based on current projectionsData state
    const calculateAllTotals = useCallback(() => {
        const { revenue, cogs, operatingExpenses, payroll, startupCosts, fundingSources, taxRate } = projectionsData;

        // Year 1 Calculations
        const totalRevenueY1 = revenue.foodSales + revenue.beverageSales + revenue.merchandiseSales + revenue.cateringSales + revenue.otherRevenue;
        const totalCogsY1 =
            (revenue.foodSales * cogs.foodCogsPercent) +
            (revenue.beverageSales * cogs.beverageCogsPercent) +
            (revenue.merchandiseSales * cogs.merchandiseCogsPercent) +
            (revenue.cateringSales * cogs.cateringCogsPercent) +
            (revenue.otherRevenue * cogs.otherCogsPercent);
        const grossProfitY1 = totalRevenueY1 - totalCogsY1;

        const totalOperatingExpensesExclDepIntY1 =
            operatingExpenses.rent + operatingExpenses.utilities + operatingExpenses.insurance +
            operatingExpenses.marketing + operatingExpenses.legalAccounting + operatingExpenses.repairsMaintenance +
            operatingExpenses.supplies + operatingExpenses.adminOffice + operatingExpenses.wasteRemoval +
            operatingExpenses.musicLicensing + operatingExpenses.otherOperatingExpenses;

        const totalSalariesY1 = payroll.salaryOwners + payroll.salaryFullTime + payroll.salaryPartTime;
        const totalPayrollCostsY1 = totalSalariesY1 * (1 + payroll.payrollTaxRate);

        const EBITY1 = grossProfitY1 - totalOperatingExpensesExclDepIntY1 - totalPayrollCostsY1;
        const netIncomeBeforeTaxY1 = EBITY1 - operatingExpenses.depreciation - operatingExpenses.interestExpense;
        const netIncomeAfterTaxY1 = netIncomeBeforeTaxY1 * (1 - taxRate);

        // Year 2 Calculations
        const totalRevenueY2 = totalRevenueY1 * (1 + revenue.annualGrowthRate);
        const totalCogsY2 =
            (revenue.foodSales * (1 + revenue.annualGrowthRate) * cogs.foodCogsPercent) +
            (revenue.beverageSales * (1 + revenue.annualGrowthRate) * cogs.beverageCogsPercent) +
            (revenue.merchandiseSales * (1 + revenue.annualGrowthRate) * cogs.merchandiseCogsPercent) +
            (revenue.cateringSales * (1 + revenue.annualGrowthRate) * cogs.cateringCogsPercent) +
            (revenue.otherRevenue * (1 + revenue.annualGrowthRate) * cogs.otherCogsPercent);
        const grossProfitY2 = totalRevenueY2 - totalCogsY2;

        const totalOperatingExpensesExclDepIntY2 = totalOperatingExpensesExclDepIntY1 * (1 + operatingExpenses.opExGrowthRate);
        const totalPayrollCostsY2 = totalPayrollCostsY1 * (1 + payroll.payrollGrowthRate);

        const EBITY2 = grossProfitY2 - totalOperatingExpensesExclDepIntY2 - totalPayrollCostsY2;
        const netIncomeBeforeTaxY2 = EBITY2 - operatingExpenses.depreciation - operatingExpenses.interestExpense;
        const netIncomeAfterTaxY2 = netIncomeBeforeTaxY2 * (1 - taxRate);

        // Year 3 Calculations
        const totalRevenueY3 = totalRevenueY2 * (1 + revenue.annualGrowthRate);
        const totalCogsY3 =
            (revenue.foodSales * Math.pow((1 + revenue.annualGrowthRate), 2) * cogs.foodCogsPercent) +
            (revenue.beverageSales * Math.pow((1 + revenue.annualGrowthRate), 2) * cogs.beverageCogsPercent) +
            (revenue.merchandiseSales * Math.pow((1 + revenue.annualGrowthRate), 2) * cogs.merchandiseCogsPercent) +
            (revenue.cateringSales * Math.pow((1 + revenue.annualGrowthRate), 2) * cogs.cateringCogsPercent) +
            (revenue.otherRevenue * Math.pow((1 + revenue.annualGrowthRate), 2) * cogs.otherCogsPercent);
        const grossProfitY3 = totalRevenueY3 - totalCogsY3;

        const totalOperatingExpensesExclDepIntY3 = totalOperatingExpensesExclDepIntY2 * (1 + operatingExpenses.opExGrowthRate);
        const totalPayrollCostsY3 = totalPayrollCostsY2 * (1 + payroll.payrollGrowthRate);

        const EBITY3 = grossProfitY3 - totalOperatingExpensesExclDepIntY3 - totalPayrollCostsY3;
        const netIncomeBeforeTaxY3 = EBITY3 - operatingExpenses.depreciation - operatingExpenses.interestExpense;
        const netIncomeAfterTaxY3 = netIncomeBeforeTaxY3 * (1 - taxRate);


        // Total Startup Costs
        const totalStartupCosts =
            startupCosts.leaseholdImprovements + startupCosts.kitchenEquipment + startupCosts.furnitureFixtures +
            startupCosts.initialInventory + startupCosts.preOpeningSalaries + startupCosts.depositsLicenses +
            startupCosts.initialMarketing + startupCosts.legalFeesStartup + startupCosts.architecturalFeesStartup +
            startupCosts.preOpeningRentDeposit + startupCosts.contingency;

        // Total Funding
        const totalFunding = fundingSources.ownersEquity + fundingSources.investorFunds + fundingSources.bankLoans + fundingSources.otherFunding;

        // Margins
        const grossProfitMarginY1 = totalRevenueY1 > 0 ? (grossProfitY1 / totalRevenueY1) : 0;
        const operatingProfitMarginY1 = totalRevenueY1 > 0 ? (EBITY1 / totalRevenueY1) : 0;
        const netProfitMarginY1 = totalRevenueY1 > 0 ? (netIncomeAfterTaxY1 / totalRevenueY1) : 0;

        const grossProfitMarginY2 = totalRevenueY2 > 0 ? (grossProfitY2 / totalRevenueY2) : 0;
        const operatingProfitMarginY2 = totalRevenueY2 > 0 ? (EBITY2 / totalRevenueY2) : 0;
        const netProfitMarginY2 = totalRevenueY2 > 0 ? (netIncomeAfterTaxY2 / totalRevenueY2) : 0;

        const grossProfitMarginY3 = totalRevenueY3 > 0 ? (grossProfitY3 / totalRevenueY3) : 0;
        const operatingProfitMarginY3 = totalRevenueY3 > 0 ? (EBITY3 / totalRevenueY3) : 0;
        const netProfitMarginY3 = totalRevenueY3 > 0 ? (netIncomeAfterTaxY3 / totalRevenueY3) : 0;

        // Break-even Analysis (Year 1)
        // Fixed Costs for Break-even: Assuming all operating expenses (excl. COGS) + payroll + depreciation + interest are fixed
        const totalFixedCostsY1 = totalOperatingExpensesExclDepIntY1 + totalPayrollCostsY1 + operatingExpenses.depreciation + operatingExpenses.interestExpense;
        const contributionMarginRatioY1 = totalRevenueY1 > 0 ? (grossProfitY1 / totalRevenueY1) : 0;
        const breakEvenSalesY1 = contributionMarginRatioY1 > 0 ? (totalFixedCostsY1 / contributionMarginRatioY1) : 0;


        return {
            totalRevenueY1, totalCogsY1, grossProfitY1, totalOperatingExpensesExclDepIntY1, totalPayrollCostsY1, EBITY1, netIncomeBeforeTaxY1, netIncomeAfterTaxY1,
            totalRevenueY2, totalCogsY2, grossProfitY2, totalOperatingExpensesExclDepIntY2, totalPayrollCostsY2, EBITY2, netIncomeBeforeTaxY2, netIncomeAfterTaxY2,
            totalRevenueY3, totalCogsY3, grossProfitY3, totalOperatingExpensesExclDepIntY3, totalPayrollCostsY3, EBITY3, netIncomeBeforeTaxY3, netIncomeAfterTaxY3,
            totalStartupCosts, totalFunding,
            grossProfitMarginY1, operatingProfitMarginY1, netProfitMarginY1,
            grossProfitMarginY2, operatingProfitMarginY2, netProfitMarginY2,
            grossProfitMarginY3, operatingProfitMarginY3, netProfitMarginY3,
            breakEvenSalesY1,
            startupBalanceStatus: Math.abs(totalStartupCosts - totalFunding) < 0.01 ? "Balanced!" : `Unbalanced: ${(totalStartupCosts - totalFunding).toLocaleString('en-US', { style: 'currency', currency: 'USD' })}`,
            startupBalanceClass: Math.abs(totalStartupCosts - totalFunding) < 0.01 ? "text-green-600 font-semibold" : "text-red-600 font-semibold"
        };
    }, [projectionsData]);

    const totals = calculateAllTotals();

    // Function to save user's projections data to Firestore
    const saveProjectionsData = useCallback(async () => {
        if (!db || !userId || !appId) {
            console.warn("Firestore not initialized, userId, or appId not available for saving data.");
            showMessage("Error", "Cannot save data. Firebase not ready.", 'error');
            return;
        }

        setIsLoading(true);
        const docRef = doc(db, `artifacts/${appId}/users/${userId}/restaurant_projections`, 'user_projections_data');
        try {
            await setDoc(docRef, projectionsData);
            showMessage("Success", "Financial projections saved successfully!", 'success');
            console.log("Financial projections saved:", projectionsData);
        } catch (error) {
            console.error("Error saving financial projections:", error);
            showMessage("Error", "Failed to save financial projections.", 'error');
        } finally {
            setIsLoading(false);
        }
    }, [db, userId, appId, showMessage, setIsLoading, projectionsData]);

    // Handle input changes for financial projections
    const handleProjectionsInputChange = useCallback((section, field, value) => {
        setProjectionsData(prevData => {
            const newData = { ...prevData };
            // Handle top-level fields (like taxRate, versionNotes)
            if (section === null) {
                return {
                    ...prevData,
                    [field]: parseFloat(value) || (value === '' ? 0 : value) // Allow empty string for text, convert numbers
                };
            }
            // Handle nested fields
            if (newData[section]) {
                newData[section] = {
                    ...newData[section],
                    [field]: parseFloat(value) || (value === '' ? 0 : value) // Convert numbers, allow empty string for text
                };
            }
            return newData;
        });
    }, [setProjectionsData]);

    // Handle version notes change, which triggers save
    const handleVersionNotesChange = useCallback((event) => {
        const value = event.target.value;
        setProjectionsData(prevData => ({
            ...prevData,
            versionNotes: value
        }));
        // Save immediately when version notes change
        saveProjectionsData();
    }, [setProjectionsData, saveProjectionsData]);

    // Toggle section visibility
    const toggleSection = (sectionId) => {
        setOpenSections(prev => ({
            ...prev,
            [sectionId]: !prev[sectionId]
        }));
    };

    // Effect to save data whenever projectionsData changes (debounced for performance)
    useEffect(() => {
        const handler = setTimeout(() => {
            saveProjectionsData();
        }, 500); // Save after 500ms of no input
        return () => {
            clearTimeout(handler);
        };
    }, [projectionsData, saveProjectionsData]); // Dependency array includes projectionsData

    // Helper for formatting currency
    const formatCurrency = (value) => value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    // Helper for formatting percentage
    const formatPercentage = (value) => (value * 100).toFixed(2) + '%';


    return (
        <div className="mb-8">
            <button className="w-full text-left bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out flex justify-between items-center" onClick={() => toggleSection('financial-projections-template')}>
                <span className="text-lg">Financial Projections Template</span>
                <span className={`transform transition-transform duration-300 ${openSections['financial-projections-template'] ? 'rotate-180' : 'rotate-0'}`}>▼</span>
            </button>
            <div id="financial-projections-template-content" className={`mt-4 p-5 bg-blue-50 rounded-lg shadow-inner ${openSections['financial-projections-template'] ? '' : 'hidden'}`}>
                <h2 className="text-2xl font-bold text-gray-800 mb-4">New Restaurant Financial Projections Template</h2>
                <p className="text-gray-700 mb-4">
                    Input your assumptions to build a comprehensive financial model for your new restaurant. All changes are saved automatically.
                </p>

                {/* Global Assumptions */}
                <div className="mb-8 p-6 bg-blue-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">Global Assumptions</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label htmlFor="taxRate" className="block text-gray-700 text-sm font-bold mb-2">Income Tax Rate (e.g., 0.25 for 25%):</label>
                            <input type="number" id="taxRate" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.25" value={projectionsData.taxRate} onChange={(e) => handleProjectionsInputChange(null, 'taxRate', e.target.value)} />
                        </div>
                    </div>
                </div>

                {/* 1. Revenue Projections */}
                <div className="mb-8 p-6 bg-blue-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">1. Revenue Projections (Year 1 Inputs)</h3>
                    <p className="text-gray-700 mb-4">Estimate your sales breakdown by category and overall annual growth.</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label htmlFor="foodSales" className="block text-gray-700 text-sm font-bold mb-2">Food Sales (Annual):</label>
                            <input type="number" id="foodSales" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 500000" value={projectionsData.revenue.foodSales} onChange={(e) => handleProjectionsInputChange('revenue', 'foodSales', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="beverageSales" className="block text-gray-700 text-sm font-bold mb-2">Beverage Sales (Annual):</label>
                            <input type="number" id="beverageSales" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 200000" value={projectionsData.revenue.beverageSales} onChange={(e) => handleProjectionsInputChange('revenue', 'beverageSales', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="merchandiseSales" className="block text-gray-700 text-sm font-bold mb-2">Merchandise Sales (Annual):</label>
                            <input type="number" id="merchandiseSales" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 5000" value={projectionsData.revenue.merchandiseSales} onChange={(e) => handleProjectionsInputChange('revenue', 'merchandiseSales', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="cateringSales" className="block text-gray-700 text-sm font-bold mb-2">Catering Sales (Annual):</label>
                            <input type="number" id="cateringSales" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 10000" value={projectionsData.revenue.cateringSales} onChange={(e) => handleProjectionsInputChange('revenue', 'cateringSales', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="otherRevenue" className="block text-gray-700 text-sm font-bold mb-2">Other Revenue (Annual):</label>
                            <input type="number" id="otherRevenue" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 0" value={projectionsData.revenue.otherRevenue} onChange={(e) => handleProjectionsInputChange('revenue', 'otherRevenue', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="annualGrowthRate" className="block text-gray-700 text-sm font-bold mb-2">Annual Revenue Growth Rate (e.g., 0.05 for 5%):</label>
                            <input type="number" id="annualGrowthRate" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.05" value={projectionsData.revenue.annualGrowthRate} onChange={(e) => handleProjectionsInputChange('revenue', 'annualGrowthRate', e.target.value)} />
                        </div>
                    </div>
                    <div className="mt-6 text-right text-lg font-bold text-gray-900">
                        Total Annual Revenue (Year 1): <span id="totalRevenueY1">{formatCurrency(totals.totalRevenueY1)}</span>
                    </div>
                </div>

                {/* 2. Cost of Goods Sold (COGS) Projections */}
                <div className="mb-8 p-6 bg-blue-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">2. Cost of Goods Sold (COGS) Projections</h3>
                    <p className="text-gray-700 mb-4">Input the estimated COGS as a percentage of sales for each category.</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label htmlFor="foodCogsPercent" className="block text-gray-700 text-sm font-bold mb-2">Food COGS % (e.g., 0.25 for 25%):</label>
                            <input type="number" id="foodCogsPercent" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.25" value={projectionsData.cogs.foodCogsPercent} onChange={(e) => handleProjectionsInputChange('cogs', 'foodCogsPercent', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="beverageCogsPercent" className="block text-gray-700 text-sm font-bold mb-2">Beverage COGS % (e.g., 0.20 for 20%):</label>
                            <input type="number" id="beverageCogsPercent" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.20" value={projectionsData.cogs.beverageCogsPercent} onChange={(e) => handleProjectionsInputChange('cogs', 'beverageCogsPercent', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="merchandiseCogsPercent" className="block text-gray-700 text-sm font-bold mb-2">Merchandise COGS % (e.g., 0.40 for 40%):</label>
                            <input type="number" id="merchandiseCogsPercent" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.40" value={projectionsData.cogs.merchandiseCogsPercent} onChange={(e) => handleProjectionsInputChange('cogs', 'merchandiseCogsPercent', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="cateringCogsPercent" className="block text-gray-700 text-sm font-bold mb-2">Catering COGS % (e.g., 0.30 for 30%):</label>
                            <input type="number" id="cateringCogsPercent" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.30" value={projectionsData.cogs.cateringCogsPercent} onChange={(e) => handleProjectionsInputChange('cogs', 'cateringCogsPercent', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="otherCogsPercent" className="block text-gray-700 text-sm font-bold mb-2">Other Revenue COGS % (e.g., 0.10 for 10%):</label>
                            <input type="number" id="otherCogsPercent" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.10" value={projectionsData.cogs.otherCogsPercent} onChange={(e) => handleProjectionsInputChange('cogs', 'otherCogsPercent', e.target.value)} />
                        </div>
                    </div>
                    <div className="mt-6 text-right text-lg font-bold text-gray-900">
                        Total COGS (Year 1): <span id="totalCogsY1">{formatCurrency(totals.totalCogsY1)}</span>
                    </div>
                    <div className="mt-2 text-right text-lg font-bold text-gray-900">
                        Gross Profit (Year 1): <span id="grossProfitY1">{formatCurrency(totals.grossProfitY1)}</span>
                    </div>
                </div>

                {/* 3. Operating Expenses Projections */}
                <div className="mb-8 p-6 bg-blue-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">3. Operating Expenses Projections (Year 1 Inputs)</h3>
                    <p className="text-gray-700 mb-4">Estimate your annual fixed and variable operating costs.</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div>
                            <label htmlFor="rent" className="block text-gray-700 text-sm font-bold mb-2">Rent (Annual):</label>
                            <input type="number" id="rent" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 60000" value={projectionsData.operatingExpenses.rent} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'rent', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="utilities" className="block text-gray-700 text-sm font-bold mb-2">Utilities (Annual):</label>
                            <input type="number" id="utilities" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 12000" value={projectionsData.operatingExpenses.utilities} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'utilities', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="insurance" className="block text-gray-700 text-sm font-bold mb-2">Insurance (Annual):</label>
                            <input type="number" id="insurance" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 7000" value={projectionsData.operatingExpenses.insurance} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'insurance', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="marketing" className="block text-gray-700 text-sm font-bold mb-2">Marketing & Advertising (Annual):</label>
                            <input type="number" id="marketing" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 10000" value={projectionsData.operatingExpenses.marketing} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'marketing', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="legalAccounting" className="block text-gray-700 text-sm font-bold mb-2">Legal & Accounting Fees (Annual):</label>
                            <input type="number" id="legalAccounting" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 5000" value={projectionsData.operatingExpenses.legalAccounting} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'legalAccounting', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="repairsMaintenance" className="block text-gray-700 text-sm font-bold mb-2">Repairs & Maintenance (Annual):</label>
                            <input type="number" id="repairsMaintenance" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 3000" value={projectionsData.operatingExpenses.repairsMaintenance} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'repairsMaintenance', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="supplies" className="block text-gray-700 text-sm font-bold mb-2">Operating Supplies (Non-Food/Bev, Annual):</label>
                            <input type="number" id="supplies" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 8000" value={projectionsData.operatingExpenses.supplies} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'supplies', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="adminOffice" className="block text-gray-700 text-sm font-bold mb-2">Admin & Office Expenses (Annual):</label>
                            <input type="number" id="adminOffice" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 2000" value={projectionsData.operatingExpenses.adminOffice} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'adminOffice', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="wasteRemoval" className="block text-gray-700 text-sm font-bold mb-2">Waste Removal (Annual):</label>
                            <input type="number" id="wasteRemoval" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 3000" value={projectionsData.operatingExpenses.wasteRemoval} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'wasteRemoval', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="musicLicensing" className="block text-gray-700 text-sm font-bold mb-2">Music Licensing (Annual):</label>
                            <input type="number" id="musicLicensing" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 1000" value={projectionsData.operatingExpenses.musicLicensing} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'musicLicensing', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="otherOperatingExpenses" className="block text-gray-700 text-sm font-bold mb-2">Other Operating Expenses (Annual):</label>
                            <input type="number" id="otherOperatingExpenses" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 5000" value={projectionsData.operatingExpenses.otherOperatingExpenses} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'otherOperatingExpenses', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="opExGrowthRate" className="block text-gray-700 text-sm font-bold mb-2">Annual Operating Expense Growth Rate (e.g., 0.03 for 3%):</label>
                            <input type="number" id="opExGrowthRate" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.03" value={projectionsData.operatingExpenses.opExGrowthRate} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'opExGrowthRate', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="depreciation" className="block text-gray-700 text-sm font-bold mb-2">Depreciation (Annual):</label>
                            <input type="number" id="depreciation" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 50000" value={projectionsData.operatingExpenses.depreciation} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'depreciation', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="interestExpense" className="block text-gray-700 text-sm font-bold mb-2">Interest Expense (Annual):</label>
                            <input type="number" id="interestExpense" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 20000" value={projectionsData.operatingExpenses.interestExpense} onChange={(e) => handleProjectionsInputChange('operatingExpenses', 'interestExpense', e.target.value)} />
                        </div>
                    </div>
                    <div className="mt-6 text-right text-lg font-bold text-gray-900">
                        Total Operating Expenses (Excl. Payroll, Dep, Int) (Year 1): <span id="totalOperatingExpensesExclDepIntY1">{formatCurrency(totals.totalOperatingExpensesExclDepIntY1)}</span>
                    </div>
                </div>

                {/* 4. Payroll Projections */}
                <div className="mb-8 p-6 bg-blue-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">4. Payroll Projections (Year 1 Inputs)</h3>
                    <p className="text-gray-700 mb-4">Estimate your annual payroll costs including salaries, wages, and associated taxes/benefits.</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label htmlFor="salaryOwners" className="block text-gray-700 text-sm font-bold mb-2">Owner(s) Salary (Annual):</label>
                            <input type="number" id="salaryOwners" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 50000" value={projectionsData.payroll.salaryOwners} onChange={(e) => handleProjectionsInputChange('payroll', 'salaryOwners', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="salaryFullTime" className="block text-gray-700 text-sm font-bold mb-2">Full-Time Employee Salaries (Annual):</label>
                            <input type="number" id="salaryFullTime" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 150000" value={projectionsData.payroll.salaryFullTime} onChange={(e) => handleProjectionsInputChange('payroll', 'salaryFullTime', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="salaryPartTime" className="block text-gray-700 text-sm font-bold mb-2">Part-Time Employee Wages (Annual):</label>
                            <input type="number" id="salaryPartTime" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 80000" value={projectionsData.payroll.salaryPartTime} onChange={(e) => handleProjectionsInputChange('payroll', 'salaryPartTime', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="payrollTaxRate" className="block text-gray-700 text-sm font-bold mb-2">Payroll Tax & Benefits Rate (e.g., 0.08 for 8%):</label>
                            <input type="number" id="payrollTaxRate" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.08" value={projectionsData.payroll.payrollTaxRate} onChange={(e) => handleProjectionsInputChange('payroll', 'payrollTaxRate', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="payrollGrowthRate" className="block text-gray-700 text-sm font-bold mb-2">Annual Payroll Growth Rate (e.g., 0.05 for 5%):</label>
                            <input type="number" id="payrollGrowthRate" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" step="0.01" placeholder="e.g., 0.05" value={projectionsData.payroll.payrollGrowthRate} onChange={(e) => handleProjectionsInputChange('payroll', 'payrollGrowthRate', e.target.value)} />
                        </div>
                    </div>
                    <div className="mt-6 text-right text-lg font-bold text-gray-900">
                        Total Payroll Costs (incl. Taxes & Benefits) (Year 1): <span id="totalPayrollCostsY1">{formatCurrency(totals.totalPayrollCostsY1)}</span>
                    </div>
                </div>

                {/* 5. Startup Costs (Initial Investment) */}
                <div className="mb-8 p-6 bg-blue-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">5. Startup Costs (Initial Investment)</h3>
                    <p className="text-gray-700 mb-4">Estimate the one-time costs to get your restaurant up and running.</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label htmlFor="startupLeaseholdImprovements" className="block text-gray-700 text-sm font-bold mb-2">Leasehold Improvements:</label>
                            <input type="number" id="startupLeaseholdImprovements" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 2000000" value={projectionsData.startupCosts.leaseholdImprovements} onChange={(e) => handleProjectionsInputChange('startupCosts', 'leaseholdImprovements', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="kitchenEquipment" className="block text-gray-700 text-sm font-bold mb-2">Kitchen Equipment:</label>
                            <input type="number" id="kitchenEquipment" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 250000" value={projectionsData.startupCosts.kitchenEquipment} onChange={(e) => handleProjectionsInputChange('startupCosts', 'kitchenEquipment', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="startupFurnitureFixtures" className="block text-gray-700 text-sm font-bold mb-2">Furniture & Fixtures (Dining Area):</label>
                            <input type="number" id="startupFurnitureFixtures" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 75000" value={projectionsData.startupCosts.furnitureFixtures} onChange={(e) => handleProjectionsInputChange('startupCosts', 'furnitureFixtures', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="startupInitialInventory" className="block text-gray-700 text-sm font-bold mb-2">Initial Inventory (Food, Bev, Supplies):</label>
                            <input type="number" id="startupInitialInventory" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 30000" value={projectionsData.startupCosts.initialInventory} onChange={(e) => handleProjectionsInputChange('startupCosts', 'initialInventory', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="preOpeningSalaries" className="block text-gray-700 text-sm font-bold mb-2">Pre-Opening Salaries & Training:</label>
                            <input type="number" id="preOpeningSalaries" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 40000" value={projectionsData.startupCosts.preOpeningSalaries} onChange={(e) => handleProjectionsInputChange('startupCosts', 'preOpeningSalaries', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="depositsLicenses" className="block text-gray-700 text-sm font-bold mb-2">Deposits & Licenses/Permits (Initial):</label>
                            <input type="number" id="depositsLicenses" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 70000" value={projectionsData.startupCosts.depositsLicenses} onChange={(e) => handleProjectionsInputChange('startupCosts', 'depositsLicenses', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="initialMarketing" className="block text-gray-700 text-sm font-bold mb-2">Initial Marketing & Grand Opening:</label>
                            <input type="number" id="initialMarketing" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 20000" value={projectionsData.startupCosts.initialMarketing} onChange={(e) => handleProjectionsInputChange('startupCosts', 'initialMarketing', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="legalFeesStartup" className="block text-gray-700 text-sm font-bold mb-2">Legal Fees (Startup):</label>
                            <input type="number" id="legalFeesStartup" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 15000" value={projectionsData.startupCosts.legalFeesStartup} onChange={(e) => handleProjectionsInputChange('startupCosts', 'legalFeesStartup', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="architecturalFeesStartup" className="block text-gray-700 text-sm font-bold mb-2">Architectural Fees (Startup):</label>
                            <input type="number" id="architecturalFeesStartup" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 50000" value={projectionsData.startupCosts.architecturalFeesStartup} onChange={(e) => handleProjectionsInputChange('startupCosts', 'architecturalFeesStartup', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="preOpeningRentDeposit" className="block text-gray-700 text-sm font-bold mb-2">Pre-Opening Rent & Security Deposit:</label>
                            <input type="number" id="preOpeningRentDeposit" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 18000" value={projectionsData.startupCosts.preOpeningRentDeposit} onChange={(e) => handleProjectionsInputChange('startupCosts', 'preOpeningRentDeposit', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="contingency" className="block text-gray-700 text-sm font-bold mb-2">Contingency (e.g., 10% of total):</label>
                            <input type="number" id="contingency" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 50000" value={projectionsData.startupCosts.contingency} onChange={(e) => handleProjectionsInputChange('startupCosts', 'contingency', e.target.value)} />
                        </div>
                    </div>
                    <div className="mt-6 text-right text-lg font-bold text-gray-900">
                        Total Startup Costs: <span id="totalStartupCosts">{formatCurrency(totals.totalStartupCosts)}</span>
                    </div>
                </div>

                {/* 6. Funding Sources */}
                <div className="mb-8 p-6 bg-blue-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">6. Funding Sources</h3>
                    <p className="text-gray-700 mb-4">Detail where your initial capital will come from.</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label htmlFor="ownersEquity" className="block text-gray-700 text-sm font-bold mb-2">Owner's Equity:</label>
                            <input type="number" id="ownersEquity" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 300000" value={projectionsData.fundingSources.ownersEquity} onChange={(e) => handleProjectionsInputChange('fundingSources', 'ownersEquity', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="investorFunds" className="block text-gray-700 text-sm font-bold mb-2">Outside Investor Funds:</label>
                            <input type="number" id="investorFunds" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 200000" value={projectionsData.fundingSources.investorFunds} onChange={(e) => handleProjectionsInputChange('fundingSources', 'investorFunds', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="bankLoans" className="block text-gray-700 text-sm font-bold mb-2">Bank Loans / Debt Financing:</label>
                            <input type="number" id="bankLoans" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 1500000" value={projectionsData.fundingSources.bankLoans} onChange={(e) => handleProjectionsInputChange('fundingSources', 'bankLoans', e.target.value)} />
                        </div>
                        <div>
                            <label htmlFor="otherFunding" className="block text-gray-700 text-sm font-bold mb-2">Other Funding Sources:</label>
                            <input type="number" id="otherFunding" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., 0" value={projectionsData.fundingSources.otherFunding} onChange={(e) => handleProjectionsInputChange('fundingSources', 'otherFunding', e.target.value)} />
                        </div>
                    </div>
                    <div className="mt-6 text-right text-lg font-bold text-gray-900">
                        Total Funding Sources: <span id="totalFundingSources">{formatCurrency(totals.totalFunding)}</span>
                    </div>
                </div>

                {/* Summary: Startup Costs vs. Funding Balance Check */}
                <div className="mb-8 p-6 bg-blue-200 rounded-lg shadow-md">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">Startup Costs vs. Funding Balance Check</h3>
                    <p className="text-gray-700 mb-4">Ensures your total funding matches your total startup costs.</p>
                    <div className="text-center text-3xl font-extrabold">
                        Status: <span id="startupBalanceCheck" className={totals.startupBalanceClass}>{totals.startupBalanceStatus}</span>
                    </div>
                </div>

                {/* Key Financial Metrics Summary */}
                <div className="mb-8 p-6 bg-green-100 rounded-lg shadow-inner">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">Key Financial Metrics Summary</h3>
                    <div className="overflow-x-auto">
                        <table className="min-w-full bg-white rounded-lg overflow-hidden shadow-md">
                            <thead className="bg-green-200 text-gray-700">
                                <tr>
                                    <th className="py-2 px-4 text-left">Metric</th>
                                    <th className="py-2 px-4 text-right">Year 1</th>
                                    <th className="py-2 px-4 text-right">Year 2</th>
                                    <th className="py-2 px-4 text-right">Year 3</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Total Revenue</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalRevenueY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalRevenueY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalRevenueY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Total COGS</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalCogsY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalCogsY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalCogsY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200 bg-green-50">
                                    <td className="py-2 px-4 font-semibold">Gross Profit</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.grossProfitY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.grossProfitY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.grossProfitY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Total Operating Expenses (Excl. Payroll, Dep, Int)</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalOperatingExpensesExclDepIntY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalOperatingExpensesExclDepIntY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalOperatingExpensesExclDepIntY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Total Payroll Costs</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalPayrollCostsY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalPayrollCostsY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.totalPayrollCostsY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Depreciation</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(projectionsData.operatingExpenses.depreciation)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(projectionsData.operatingExpenses.depreciation)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(projectionsData.operatingExpenses.depreciation)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Interest Expense</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(projectionsData.operatingExpenses.interestExpense)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(projectionsData.operatingExpenses.interestExpense)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(projectionsData.operatingExpenses.interestExpense)}</td>
                                </tr>
                                <tr className="border-b border-gray-200 bg-green-50">
                                    <td className="py-2 px-4 font-semibold">EBIT (Earnings Before Interest & Taxes)</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.EBITY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.EBITY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.EBITY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Net Income Before Tax</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.netIncomeBeforeTaxY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.netIncomeBeforeTaxY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.netIncomeBeforeTaxY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200 bg-green-100">
                                    <td className="py-2 px-4 font-semibold">Net Income After Tax</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.netIncomeAfterTaxY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.netIncomeAfterTaxY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatCurrency(totals.netIncomeAfterTaxY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Gross Profit Margin</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.grossProfitMarginY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.grossProfitMarginY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.grossProfitMarginY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Operating Profit Margin (EBIT Margin)</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.operatingProfitMarginY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.operatingProfitMarginY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.operatingProfitMarginY3)}</td>
                                </tr>
                                <tr className="border-b border-gray-200">
                                    <td className="py-2 px-4 font-semibold">Net Profit Margin</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.netProfitMarginY1)}</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.netProfitMarginY2)}</td>
                                    <td className="py-2 px-4 text-right">{formatPercentage(totals.netProfitMarginY3)}</td>
                                </tr>
                                <tr className="bg-yellow-50">
                                    <td className="py-2 px-4 font-semibold">Break-even Sales (Year 1)</td>
                                    <td className="py-2 px-4 text-right" colSpan="3">{formatCurrency(totals.breakEvenSalesY1)}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>


                {/* Version Notes and Save Button */}
                <div className="p-6 bg-white rounded-lg shadow-lg">
                    <h3 className="text-xl font-bold text-gray-800 mb-4">Save & Version Notes</h3>
                    <div className="mb-4">
                        <label htmlFor="versionNotes" className="block text-gray-700 text-sm font-bold mb-2">Version Notes:</label>
                        <input type="text" id="versionNotes" className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500" placeholder="e.g., v1.0 - Initial Draft, updated rent estimates" value={projectionsData.versionNotes} onChange={handleVersionNotesChange} />
                    </div>
                    <button onClick={saveProjectionsData} className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out">
                        Save Projections
                    </button>
                </div>
            </div>
        </div>
    );
};

// Main App Component
const App = () => {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState('anonymous');
    const [messageBox, setMessageBox] = useState({ title: '', message: '', visible: false, type: 'info' });
    const [isLoading, setIsLoading] = useState(false); // Global loading state

    // State for Progress Tracker
    const [progressData, setProgressData] = useState(initialProgressData);

    // State for Financial Projections
    const [projectionsData, setProjectionsData] = useState(initialProjectionsData);

    // Global variables from the environment (assuming they are injected)
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    const showMessage = useCallback((title, message, type = 'info') => {
        setMessageBox({ title, message, visible: true, type });
        if (type === 'success') {
            setTimeout(() => {
                setMessageBox(prev => ({ ...prev, visible: false }));
            }, 3000); // Auto-hide success messages after 3 seconds
        }
    }, []);

    const closeMessageBox = useCallback(() => {
        setMessageBox(prev => ({ ...prev, visible: false }));
    }, []);

    // Firebase Initialization and Authentication
    useEffect(() => {
        const initializeFirebase = async () => {
            if (firebaseConfig) {
                setIsLoading(true);
                try {
                    const appInstance = initializeApp(firebaseConfig);
                    const dbInstance = getFirestore(appInstance);
                    const authInstance = getAuth(appInstance);

                    setDb(dbInstance);
                    setAuth(authInstance);

                    if (initialAuthToken) {
                        await signInWithCustomToken(authInstance, initialAuthToken);
                    } else {
                        await signInAnonymously(authInstance);
                    }

                    onAuthStateChanged(authInstance, (user) => {
                        const currentUserId = user ? user.uid : crypto.randomUUID();
                        setUserId(currentUserId);
                        console.log("Firebase initialized and user authenticated:", currentUserId);
                        // Load data for both sections after auth
                        loadProgress(dbInstance, currentUserId);
                        loadProjectionsData(dbInstance, currentUserId);
                        setIsLoading(false);
                    });
                } catch (error) {
                    console.error("Error initializing Firebase or authenticating:", error);
                    showMessage("Error", "Failed to initialize Firebase. Data saving may not work.", 'error');
                    setIsLoading(false);
                }
            } else {
                showMessage("Warning", "Firebase configuration not found. Data saving is disabled.", 'warning');
                console.warn("Firebase configuration not found. Data saving is disabled.");
            }
        };

        initializeFirebase();
    }, [firebaseConfig, initialAuthToken, showMessage]); // Run only once on component mount

    // Load Progress Tracker data
    const loadProgress = useCallback((dbInstance, currentUserId) => {
        if (!dbInstance || !currentUserId) return;

        const docRef = doc(dbInstance, `artifacts/${appId}/users/${currentUserId}/restaurant_progress`, 'user_data');
        onSnapshot(docRef, (docSnap) => {
            if (docSnap.exists()) {
                const loadedData = docSnap.data();
                const mergedData = {};
                Object.keys(initialProgressData).forEach(phaseKey => {
                    mergedData[phaseKey] = {};
                    Object.keys(initialProgressData[phaseKey]).forEach(itemKey => {
                        const initialItem = initialProgressData[phaseKey][itemKey];
                        const loadedItem = loadedData[phaseKey]?.[itemKey];

                        if (typeof loadedItem === 'object' && loadedItem !== null) {
                            mergedData[phaseKey][itemKey] = { ...initialItem, ...loadedItem, documents: loadedItem.documents || [] };
                        } else if (typeof loadedItem === 'boolean') {
                            mergedData[phaseKey][itemKey] = { ...initialItem, completed: loadedItem, documents: [] };
                            if (loadedData[phaseKey]?.[itemKey + 'Notes']) {
                                mergedData[phaseKey][itemKey].notes = loadedData[phaseKey][itemKey + 'Notes'];
                            }
                        } else {
                            mergedData[phaseKey][itemKey] = initialItem;
                        }
                    });
                });
                setProgressData(mergedData);
                console.log("Loaded tracker progress:", mergedData);
            } else {
                console.log("No saved tracker progress found. Using initial data.");
                setProgressData(initialProgressData);
            }
        }, (error) => {
            console.error("Error listening to tracker document:", error);
            showMessage("Error", "Failed to load your saved tracker progress.", 'error');
            setProgressData(initialProgressData); // Fallback on error
        });
    }, [appId, showMessage]);

    // Load Financial Projections data
    const loadProjectionsData = useCallback((dbInstance, currentUserId) => {
        if (!dbInstance || !currentUserId) return;

        const docRef = doc(dbInstance, `artifacts/${appId}/users/${currentUserId}/restaurant_projections`, 'user_projections_data');
        onSnapshot(docRef, (docSnap) => {
            if (docSnap.exists()) {
                const loadedData = docSnap.data();
                const mergedData = { ...initialProjectionsData };

                for (const key in loadedData) {
                    if (loadedData.hasOwnProperty(key)) {
                        if (typeof loadedData[key] === 'object' && loadedData[key] !== null && !Array.isArray(loadedData[key])) {
                            mergedData[key] = { ...mergedData[key], ...loadedData[key] };
                        } else {
                            mergedData[key] = loadedData[key];
                        }
                    }
                }
                setProjectionsData(mergedData);
                console.log("Loaded financial projections:", mergedData);
            } else {
                console.log("No saved financial projections found. Using initial template data.");
                setProjectionsData(initialProjectionsData);
            }
        }, (error) => {
            console.error("Error listening to projections document:", error);
            showMessage("Error", "Failed to load your saved financial projections.", 'error');
            setProjectionsData(initialProjectionsData); // Fallback on error
        });
    }, [appId, showMessage]);

    return (
        <FirebaseContext.Provider value={{ db, userId, showMessage, progressData, setProgressData, projectionsData, setProjectionsData, appId, setIsLoading }}>
            {isLoading && <LoadingSpinner />}
            <MessageBox
                title={messageBox.title}
                message={messageBox.message}
                type={messageBox.type}
                onClose={closeMessageBox}
            />
            <div className="max-w-4xl mx-auto bg-white shadow-lg rounded-xl p-6 sm:p-8 lg:p-10 font-sans">
                <h1 className="text-3xl sm:text-4xl font-extrabold text-gray-900 mb-6 text-center">
                    Boston Restaurant Opening Guide & Progress Tracker
                </h1>
                <p className="text-gray-700 mb-4 text-center leading-relaxed">
                    Welcome to your step-by-step guide to opening a restaurant in Boston! Track your progress through essential permits and forms, and build your financial projections.
                </p>
                <div id="user-id-display" className="text-sm text-gray-500 text-center mb-8 p-2 bg-gray-50 rounded-md">
                    User ID: <span className="font-mono text-gray-700">{userId}</span> {userId === 'anonymous' ? '(Anonymous)' : ''}
                </div>

                <ProgressTracker />
                <FinancialProjections />

            </div>
        </FirebaseContext.Provider>
    );
};

export default App;
